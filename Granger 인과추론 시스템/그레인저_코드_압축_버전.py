# -*- coding: utf-8 -*-
"""그레인저_코드_압축_버전.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zTivmEAWBcbOIaENR0erEgUfsT0VIB8r
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/craling/통합 파일/president.csv', header=None)

df.loc[df[0]=='2017년 10월 1주', 1] = str((67.7+68.5)/2)+'%'
df.loc[df[0]=='2018년 6월 1주', 1] = str((71.4+75.9)/2)+'%'

index = max(df.index)

df.loc[index] = ['2022년 3월 5주', '44.80%']
df.loc[index+1] = ['2022년 4월 1주', '43.20%']
df.loc[index+2] = ['2022년 4월 2주', '42.50%']
df.loc[index+3] = ['2022년 4월 3주', '42.10%']
df.loc[index+4] = ['2022년 4월 4주', '42.80%']
df.loc[index+5] = ['2022년 5월 1주', '41.40%']

df = df.dropna(axis=0)

df[1] = df[1].str.replace('%', '')
df[1] = df[1].apply(pd.to_numeric)

df[0] = df[0].str.replace('년 ', '-')
df[0] = df[0].str.replace('월 ', '-')
df[0] = df[0].str.replace('주', 'week')
df[0] = pd.date_range('2017-5-22', '2022-5-9', freq='7D')

plt.plot(df[0], df[1])
plt.show()

from google.colab import drive
drive.mount('/content/drive')

# 조사기간은 월~금, 발표는 그다음주 월
# 조사기간 3/21~3/25, 발표 3/28
# 기사 코드는 3/19/토 ~ 3/25/금

# 기사 -> 2017/5/13/토 ~ 2017/5/19/금
# 발표 -> 2017/5/22/월

# 5/20~5/26

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import grangercausalitytests
from datetime import datetime
import datetime
import time

df_article = pd.read_csv('/content/drive/MyDrive/craling/통합 파일/실업률1.csv')#, encoding='cp949') # csv파일 업로드 후 사용하려니 자꾸 오류발생해서 드라이브에 연결함 사용하실 때 수정바람
del df_article['Unnamed: 0']
df_article['기사작성일'] = pd.to_datetime(df_article['기사작성일'])
df_article

df_article = df_article.drop_duplicates()

keyword_count = df_article.groupby('기사작성일').count()
keyword_count = keyword_count.reset_index()

week_count_list = []
a = pd.to_datetime('2017-5-13') # '2017-5-13/토'
b = pd.to_datetime('2017-5-20') # '2017-5-20/토', 2017/5/19/금에서 +1한거임. for문처럼 range할때 +1해야함

while True: # while문 안에서 조사기간동안 기사 개수 세는거임
  count = keyword_count[(a < keyword_count['기사작성일']) & (keyword_count['기사작성일'] < b)]['기사제목'].sum()
  week_count_list.append(count)

  if a == pd.to_datetime('2022-4-16'): # 2022-4-30/토요일이 마지막 조사기간에 적용되는 첫 기사 날짜
    break
    
  a = a + datetime.timedelta(days=7)
  b = b + datetime.timedelta(days=7)

print(len(week_count_list)) #꼭 확인하기 -> 254 이어야함 -> 지지율 더 추가해서 바뀔 수 있음

# 2017/5/19/금요일이 첫번째 여론조사 마감일
# 2022/5/6/금요일이 마지막 여론조사 마감일
week_article_count = pd.DataFrame(week_count_list, pd.date_range('2017-5-19', '2022-4-23', freq='7D'))
week_article_count = week_article_count.reset_index()
week_article_count.columns = ['date', 'count']

week_article_count

sub_df = df.loc[df[df[0]==pd.to_datetime('2017-5-22')].index.values[0] : df[df[0]==pd.to_datetime('2022-4-25')].index.values[0]]
sub_df

fig = plt.figure(figsize=(8,6)) ## 캔버스 생성
fig.set_facecolor('white')
ax1 = fig.add_subplot() ## axes 생성
color1 = 'y'
ax1.plot(week_article_count['date'], week_article_count['count'], color=color1)
color2 = 'b'
ax2 = ax1.twinx()


ax2.plot(sub_df[0], sub_df[1], color=color2)
#ax2.plot(df[0], df[1], color=color2)


plt.show()

granger = pd.DataFrame(week_article_count['count'].values, sub_df[1].values) #sub_df[1]
#granger = pd.DataFrame(week_article_count['count'].values, df[1].values)

granger = granger.reset_index()
granger.columns = ['result', 'cause']
granger

grangercausalitytests(granger, 3)

from statsmodels.tsa.stattools import adfuller                                   #adfuller 테스트
def adf_test(timeseries, pvalue = .05, regression_option = 'ct'):
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC', regression = regression_option)
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
       dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)
    if dfoutput[1] < pvalue:
       print(f"정상시계열이 아니라는 귀무가설을 {pvalue*100}%의 유의수준으로 기각할 수 있으므로 해당 데이터는 정상성이 보장됩니다.")
    else:
       print(f"정상시계열이 아니라는 귀무가설을 {pvalue*100}%의 유의수준으로 기각할 수 없으므로 해당 데이터는 정상성을 보장하지 못합니다.")

from statsmodels.tsa.stattools import kpss                                       #kpss 테스트  두 테스트를 통과해야 정상성이 있다고 판정함
def kpss_test(timeseries, pvalue = .05, regression_option = 'ct'):
    print ('Results of KPSS Test:')
    kpsstest = kpss(timeseries, regression= regression_option)
    kpss_output = pd.Series(kpsstest[0:3], index=['Test Statistic','p-value','Lags Used'])
    for key,value in kpsstest[3].items():
        kpss_output['Critical Value (%s)'%key] = value
    print (kpss_output)
    if kpss_output[1] < pvalue:
        print(f"정상시계열이 맞다는 귀무가설을 {pvalue*100}%의 유의수준으로 기각할 수 있으므로 해당 데이터는 정상성을 보장하지 못합니다.")
    else:
        print(f"정상시계열이 맞다는 귀무가설을 {pvalue*100}%의 유의수준으로 기각할 수 없으므로 해당 데이터는 정상성이 보장됩니다.")

adf_test(week_article_count['count'])   # 키워드 시계열 데이터 정상성 테스트
kpss_test(week_article_count['count'])

adf_test(sub_df[1])   # 대통령 시계열 데이터 정상성 테스트
kpss_test(sub_df[1])

# 차분을 거치고 따로 리스트에 저장하지 않으면 Nan 값이 들어가 정상성 확인과 그레인저 테스트가 안됌
# 따로 저장 시 리스트 개수가 줄어들어 그래프를 볼 때 오류가 생기므로 기존 시계열 데이터에 저장하는 것과 따로 저장하는 것 두개를 준비
#1차 차분 
week_article_count['diff_count'] = np.log(week_article_count['count']).dropna() #키워드 그레인저
diff_count = np.log(week_article_count['count']).dropna()                       #키워드 그래프
sub_df[2] = np.log(sub_df[1]).dropna()                                          #대통령 지지율 그레인저
diff_df = np.log(sub_df[1]).dropna()                                            #대통령 지지율 그래프

diff_count = diff_count.diff(1).dropna()
week_article_count['diff_count'] = diff_count
diff_df = diff_df.diff(1).dropna()
sub_df[2] = diff_df

adf_test(diff_count)   # 차분한 키워드 시계열 데이터 정상성 테스트
kpss_test(diff_count)

adf_test(diff_df)   # 차분한 대통령 시계열 데이터 정상성 테스트
kpss_test(diff_df)

# 기간이 너무 짧아서 2차 차분까지 진행해도 정상성을 가지지 못하는 것으로 판단되어 기간을 확장함 정상성 

fig = plt.figure(figsize=(8,6)) ## 캔버스 생성
fig.set_facecolor('white')
ax1 = fig.add_subplot() ## axes 생성
color1 = 'y'
ax1.plot(week_article_count['date'], week_article_count['diff_count'], color=color1)
color2 = 'b'
ax2 = ax1.twinx()


ax2.plot(sub_df[0], sub_df[2], color=color2)
#ax2.plot(df[0], df[1], color=color2)


plt.show()

granger = pd.DataFrame(diff_count.values, diff_df.values) #sub_df[1]
#granger = pd.DataFrame(week_article_count['count'].values, df[1].values)

granger = granger.reset_index()
granger.columns = ['result', 'cause']
granger

grangercausalitytests(granger, 14)  #정상 시계열 데이터 테스트

granger = pd.DataFrame(week_article_count['count'].values, sub_df[1].values) #sub_df[1]
#granger = pd.DataFrame(week_article_count['count'].values, df[1].values)

granger = granger.reset_index()
granger.columns = ['result', 'cause']
granger

grangercausalitytests(granger, 12) # 시계열 데이터 테스트

# 결과 값 비교 시 차분한 후가 오히려 더 결과 값이 안좋아서 방법을 좀 추가해야할 듯 함

